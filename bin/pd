#!/bin/bash

APP="tater"
REMOTE_USER="deploy"
SERVER="levine-0"

BUILD_DIR="/http/www/t/tater.einsteinsandbox.com/Tater"
RELEASES_DIR="/http/www/t/tater.einsteinsandbox.com/Tater/releases"
CURRENT_DIR="/http/www/t/tater.einsteinsandbox.com/Tater/current"
DEPLOY_DIR="/opt/${APP}"

LOG_FILE="tmp/log/deploy.log"

############

VERSION=`awk '/version: \"(.*)\"/{ print $2 }' ./mix.exs | cut -d '"' -f2`

deploy() {
  echo -e "Deploying ${APP} v${VERSION} to ${SERVER}"
  echo -e "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"

  touch $LOG_FILE

  TMP_DIR="tmp/releases/${VERSION}"
  TMP_FILE="${TMP_DIR}/${APP}.tar.gz"

  if [ -f $TMP_FILE ]; then
    echo -e "~~~> Warning: Compiled app already exists"
  else
    echo -e "~~~> Compiling in container"
    if [[ $(docker ps -q --filter "name=tater") ]]; then
      docker rm -f ${APP} > /dev/null
    fi
    # TODO: stream to log file instead of overwriting
    docker build -t ${APP} . > $LOG_FILE
    docker run -it -d --name ${APP} ${APP} > $LOG_FILE
    mkdir -p $TMP_DIR
    docker cp $APP:/home/src/_build/prod/rel/$APP/releases/$VERSION/$APP.tar.gz $TMP_FILE
  fi

  RELEASE_DIR=$RELEASES_DIR/$VERSION
  RELEASE_FILE=$RELEASE_DIR/$APP.tar.gz

  echo -e "~~~> Deploying to ${SERVER}"
  if ssh ${REMOTE_USER}@${SERVER} -- "stat $RELEASE_FILE > /dev/null 2>&1" > /dev/null 2>&1; then
    echo -e "~~~> Warning: Current version already deployed"
  else
    ssh ${REMOTE_USER}@${SERVER} -- "mkdir ${RELEASES_DIR}/${VERSION}" > /dev/null 2>&1
    rsync -r ${TMP_FILE} ${REMOTE_USER}@${SERVER}:${RELEASE_FILE} > /dev/null 2>&1
  fi
  if ! ssh ${REMOTE_USER}@${SERVER} -- "stat ${RELEASE_DIR}/bin > /dev/null 2>&1" > /dev/null 2>&1; then
    ssh ${REMOTE_USER}@${SERVER} -- "cd ${RELEASE_DIR} && tar xzf ${RELEASE_FILE}" > /dev/null 2>&1
  fi

  echo -e "~~~> Restarting app"
  stop
  ssh ${REMOTE_USER}@${SERVER} -- "rm ${CURRENT_DIR} > /dev/null 2>&1 && ln -s ${RELEASE_DIR} ${CURRENT_DIR}" > /dev/null 2>&1
  start
}

migrate() {
  echo -e "--> Running migrations"
  ssh ${REMOTE_USER}@${SERVER} -- "${CURRENT_DIR}/bin/${APP} migrate" > /dev/null 2>&1
}

upgrade() {
  # echo -e "Upgrading to version ${VERSION}\n"
  # ssh ${REMOTE_USER}@${SERVER} -- "cd ${DEPLOY_DIR} && bin/${APP} upgrade ${VERSION}"
  echo -e "Not yet implemented"
}

downgrade() {
  echo -e "Not yet implemented"
}

start() {
  ssh ${REMOTE_USER}@${SERVER} -- "${CURRENT_DIR}/bin/${APP} start" > /dev/null 2>&1
}

stop() {
  ssh ${REMOTE_USER}@${SERVER} -- "${CURRENT_DIR}/bin/${APP} stop" > /dev/null 2>&1
}

restart() {
  ssh ${REMOTE_USER}@${SERVER} -- "${CURRENT_DIR}/bin/${APP} restart" > /dev/null 2>&1
}

console() {
  ssh ${REMOTE_USER}@${SERVER} -- "${CURRENT_DIR}/bin/${APP} remote_console"
}

ping() {
  ssh ${REMOTE_USER}@${SERVER} -- "${CURRENT_DIR}/bin/${APP} ping"
}

clean() {
  # TODO: remove old versions
  echo -e "Not yet implemented"
}

case "$1" in
  deploy)
    deploy
    ;;
  migrate)
    migrate
    ;;
  start)
    start
    ;;
  stop)
    stop
    ;;
  restart)
    restart
    ;;
  upgrade)
    upgrade
    ;;
  downgrade)
    downgrade
    ;;
  console)
    console
    ;;
  ping)
    ping
    ;;
  clean)
    clean
    ;;
  *)
    echo "Usage: $0 {deploy|migrate|upgrade|downgrade|stop|start|restart|clean}" >&2
    exit 1
    ;;
esac
